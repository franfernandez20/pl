/* The following code was generated by JFlex 1.6.1 */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/francisco.fernandez/Documents/uni/PL/Repository_pl/99_Practica-00/file_00.flex</tt>
 */
class MdtoHTML {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\10\2\0\1\7\22\0\1\6\2\0\1\5\4\0\1\27"+
    "\1\30\1\3\1\0\1\0\1\4\1\31\1\2\2\1\1\20\7\1"+
    "\1\23\3\0\1\12\2\0\10\1\1\14\21\1\1\25\1\0\1\26"+
    "\1\0\1\11\1\0\1\16\6\1\1\21\3\1\1\17\3\1\1\22"+
    "\2\1\1\24\1\15\6\1\1\0\1\0\1\0\1\13\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff91\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\5\1\2\2\4\1\5\0\1\3\2\0\1\4"+
    "\5\0\1\5\3\0\1\3\3\0\2\4\3\0\1\6"+
    "\1\0\2\7\3\0\1\10\5\0\1\11\1\0\1\12"+
    "\1\0\1\10\3\0\1\12\2\0\1\12\4\0\1\13"+
    "\1\14\2\0\1\13\4\0\1\14\5\0\1\15\1\14"+
    "\2\0\1\16\1\15\6\0\1\17\1\0\1\17\3\0"+
    "\1\20\3\0\1\21\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[107];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\32\0\64\0\116\0\150\0\202\0\234\0\32"+
    "\0\266\0\320\0\352\0\u0104\0\u011e\0\u0138\0\u0152\0\u016c"+
    "\0\u0186\0\u01a0\0\u01ba\0\u01d4\0\u01ee\0\u0208\0\u0104\0\u0222"+
    "\0\u023c\0\u0256\0\32\0\u0270\0\u028a\0\u02a4\0\32\0\u02be"+
    "\0\u02d8\0\u02f2\0\u030c\0\32\0\u0326\0\u0340\0\u035a\0\32"+
    "\0\u0374\0\u038e\0\32\0\u03a8\0\u03c2\0\u03dc\0\u03f6\0\u0410"+
    "\0\u042a\0\u0444\0\u045e\0\u0478\0\u0444\0\u0492\0\u04ac\0\u04c6"+
    "\0\32\0\u04e0\0\u04fa\0\u0514\0\u052e\0\u0548\0\u0562\0\32"+
    "\0\u057c\0\u0596\0\u05b0\0\u05ca\0\u05e4\0\u05fe\0\u0618\0\u0632"+
    "\0\32\0\u064c\0\u0666\0\u0680\0\u069a\0\u06b4\0\u06ce\0\u06e8"+
    "\0\u0702\0\u071c\0\u0736\0\u0750\0\32\0\u076a\0\u0784\0\u04ac"+
    "\0\32\0\u079e\0\u07b8\0\u07d2\0\u07ec\0\u0806\0\u0820\0\u083a"+
    "\0\u0854\0\32\0\u083a\0\u086e\0\u0888\0\32\0\u08a2\0\u08bc"+
    "\0\u08d6\0\u0444\0\u08f0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[107];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\1\3\1\4\1\5\1\6\1\2\1\7\1\10"+
    "\1\11\1\12\1\13\11\2\1\14\4\2\35\0\1\15"+
    "\26\0\3\16\1\17\26\16\4\0\1\20\25\0\5\21"+
    "\1\22\24\21\10\0\1\10\21\0\11\23\1\24\20\23"+
    "\6\0\1\25\36\0\1\26\16\0\7\27\2\0\15\27"+
    "\1\30\3\27\3\31\1\32\26\31\3\16\1\33\26\16"+
    "\3\34\1\35\10\34\1\36\15\34\4\0\1\35\25\0"+
    "\5\21\1\37\24\21\5\40\1\41\24\40\11\23\1\33"+
    "\20\23\11\42\1\35\20\42\7\25\1\43\1\44\21\25"+
    "\13\0\1\45\16\0\7\27\2\0\15\27\1\30\1\46"+
    "\2\27\3\31\1\47\26\31\2\0\1\50\1\32\26\0"+
    "\3\34\1\51\10\34\1\36\15\34\7\0\1\52\1\53"+
    "\21\0\3\34\1\51\10\34\1\36\1\54\14\34\5\40"+
    "\1\55\24\40\5\56\1\57\24\56\11\42\1\60\20\42"+
    "\10\0\1\44\21\0\13\45\1\61\16\45\7\62\2\0"+
    "\10\62\1\63\4\62\1\64\1\62\1\65\1\62\2\31"+
    "\1\50\1\47\26\31\3\66\1\67\26\66\10\0\1\53"+
    "\21\0\3\34\1\51\10\34\1\36\1\34\1\70\13\34"+
    "\5\0\1\71\24\0\5\56\1\72\24\56\5\73\1\74"+
    "\24\73\11\42\1\75\20\42\13\45\1\76\16\45\7\62"+
    "\2\0\15\62\1\64\1\62\1\65\10\62\2\0\4\62"+
    "\1\77\10\62\1\64\1\62\1\65\10\62\2\0\15\62"+
    "\1\64\1\46\1\65\1\62\3\66\1\51\26\66\3\0"+
    "\1\100\26\0\3\34\1\51\10\34\1\36\2\34\1\101"+
    "\12\34\5\0\1\102\24\0\5\73\1\103\24\73\5\104"+
    "\1\105\24\104\11\0\1\100\20\0\13\45\1\106\16\45"+
    "\7\62\2\0\4\62\1\107\10\62\1\64\1\62\1\65"+
    "\1\62\3\34\1\51\10\34\1\36\3\34\1\110\11\34"+
    "\5\0\1\111\31\0\1\112\24\0\5\104\1\113\24\104"+
    "\5\114\1\115\24\114\13\0\1\116\16\0\7\62\2\0"+
    "\11\62\1\117\3\62\1\64\1\62\1\65\1\62\3\110"+
    "\1\120\26\110\5\0\1\121\31\0\1\122\24\0\5\114"+
    "\1\123\24\114\5\0\1\124\37\0\1\125\16\0\7\62"+
    "\2\0\12\62\1\126\1\127\1\62\1\64\1\62\1\65"+
    "\1\62\3\66\1\130\26\66\5\0\1\131\31\0\1\132"+
    "\31\0\1\133\31\0\1\134\24\0\2\62\1\135\4\62"+
    "\2\0\15\62\1\64\1\62\1\65\10\62\2\0\12\62"+
    "\1\126\2\62\1\64\1\62\1\65\1\62\5\0\1\136"+
    "\31\0\1\137\31\0\1\140\24\0\2\62\1\141\4\62"+
    "\2\0\15\62\1\64\1\62\1\65\1\62\5\0\1\142"+
    "\31\0\1\143\31\0\1\144\24\0\1\62\1\145\5\62"+
    "\2\0\3\62\7\145\1\62\1\145\1\62\1\64\1\62"+
    "\1\65\1\62\5\0\1\146\24\0\1\62\1\145\5\62"+
    "\2\0\3\62\7\145\1\62\1\145\1\62\1\64\1\62"+
    "\1\65\1\147\1\62\1\150\1\151\4\62\2\0\3\62"+
    "\7\150\1\62\1\150\1\62\1\64\1\62\1\65\2\62"+
    "\1\150\1\151\4\62\2\0\3\62\7\150\1\62\1\150"+
    "\1\62\1\64\1\62\1\152\1\153\1\62\2\151\4\62"+
    "\2\0\3\62\7\151\1\62\1\151\1\62\1\64\1\62"+
    "\1\152\2\62\2\151\4\62\2\0\3\62\7\151\1\62"+
    "\1\151\1\62\1\64\1\62\1\65\1\62";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2314];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\5\1\1\11\4\1\5\0\1\1\2\0"+
    "\1\1\5\0\1\11\3\0\1\11\3\0\1\1\1\11"+
    "\3\0\1\11\1\0\1\1\1\11\3\0\1\1\5\0"+
    "\1\1\1\0\1\1\1\0\1\11\3\0\1\1\2\0"+
    "\1\11\4\0\2\1\2\0\1\11\4\0\1\1\5\0"+
    "\1\1\1\11\2\0\1\1\1\11\6\0\1\1\1\0"+
    "\1\11\3\0\1\11\3\0\1\1\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[107];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
 
 /* Código personalizado */
 
 
 private int c = 0;
 


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  MdtoHTML(java.io.Reader in) {
   /* Código que se ejecutará en el constructor de la clase */
 	System.out.println("<!DOCTYPE html><html>");
 	System.out.println("<head>");
 	System.out.println("<title>MarkDown2HTML</title>");
 	System.out.println("<style> ");
 	System.out.println("	.bold {font-weight: bold;} ");
 	System.out.println("	.ital {font-style: italic;}");
 	System.out.println("</style>");
 	System.out.println("</head><body> ");

    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 130) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
     
 /* Código a ejecutar al finalizar el análisis */
	
	System.out.println("</body></html>");
 

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { /*Ignorar*/
            }
          case 18: break;
          case 2: 
            { System.out.println();
            }
          case 19: break;
          case 3: 
            { String cadena = yytext();
				cadena=cadena.replace("#","");
				System.out.print("<h1>"+cadena+"</h1>");
            }
          case 20: break;
          case 4: 
            { String cadena = yytext();
				cadena=cadena.replace(">","	");
				System.out.println("<blockquote>\n"+cadena+"</blockquote>");
            }
          case 21: break;
          case 5: 
            { String cadena = yytext();
				cadena=cadena.substring(1,yylength()-1);
				//cadena=cadena.replace("*","");
				//cadena=cadena.replace("_","");
				System.out.print("<SPAN class=\"ital\">"+cadena+"</SPAN>");
            }
          case 22: break;
          case 6: 
            { String cadena = yytext();
						cadena.substring(4, yylength()-4);
						cadena=cadena.replace("*","");
						System.out.print("----->"+ yytext()+"\n");
						
						System.out.print("<h1>"+cadena+"</h1>");
            }
          case 23: break;
          case 7: 
            { System.out.println("<hr/>");
            }
          case 24: break;
          case 8: 
            { String cadena = yytext();
				cadena=cadena.replace("#","");
				System.out.print("<h2>"+cadena+"</h2>");
            }
          case 25: break;
          case 9: 
            { String url="",text="";
				String cadena = yytext();
				int length = cadena.length();
				for (int i = 1 ;i<length ;i++ ) {					
					if (cadena.charAt(i)==']'){
						url = cadena.substring(i+2,length-1);
						text = cadena.substring(1,i);
					}					
				}
				System.out.print("<A HREF=\""+url+ "\">");
				System.out.print(text+"(URL aparentemente incorrecta)");
				System.out.print("</A>");
            }
          case 26: break;
          case 10: 
            { String cadena = yytext();
				cadena = cadena.substring(2,yylength()-2);
				//cadena=cadena.replace("*","");
				//cadena=cadena.replace("_","");
				System.out.print("<SPAN class=\"bold\">"+cadena+"</SPAN>");
            }
          case 27: break;
          case 11: 
            { String cadena = yytext();
				cadena=cadena.replace("#","");
				System.out.print("<h3>"+cadena+"</h3>");
            }
          case 28: break;
          case 12: 
            { String cadena = yytext();
				cadena=cadena.replace("~","");
				System.out.println("<code> <pre>"+cadena+"</pre></code>");
            }
          case 29: break;
          case 13: 
            { String cadena = yytext();
				cadena=cadena.replace("#","");
				System.out.print("<h4>"+cadena+"</h4>");
            }
          case 30: break;
          case 14: 
            { System.out.println(yytext()+"YESS");
            }
          case 31: break;
          case 15: 
            { String cadena = yytext();
				cadena=cadena.replace("#","");
				System.out.print("<h5>"+cadena+"</h5>");
            }
          case 32: break;
          case 16: 
            { String cadena = yytext();
				cadena=cadena.replace("#","");
				System.out.print("<h6>"+cadena+"</h6>");
            }
          case 33: break;
          case 17: 
            { String url="",text="";
				String cadena = yytext();
				int length = cadena.length();
				for (int i = 1 ;i<length ;i++ ) {					
					if (cadena.charAt(i)==']'){
						url = cadena.substring(i+2,length-1);
						text = cadena.substring(1,i);
					}					
				}
				System.out.print("<A HREF=\""+url+ "\">");
				System.out.print(text);
				System.out.print("</A>");
            }
          case 34: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java MdtoHTML [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        MdtoHTML scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new MdtoHTML(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
